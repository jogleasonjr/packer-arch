#!/bin/bash

set -x
set -e

# This script is for getting the .qcow2 images from the qemu Packer builder to work with Proxmox. The process is this:
#   1. Generate a qcow2 image using the Packer qemu builder.
#   2. Create a new VM in Proxmox. Choose any VM ID but take note of it as {VMID}
#      Non-default settings are:
#       OS
#           [x] Do not use any media
#       Hard Disk
#           Storage: (somewhere to which you can copy files from the Packer directory)
#           Disk Size: (match what you used in the Packer template)
#           Format: qcow2
#       CPU
#           Cores: (match what you used in the Packer template)
#       Memory:
#           Memory: (match what you used in the Packer template)
#
#   3. Figure out the storage directory for this VM ID, something like `/yourdisk/sdb1/images/{VMID}/`
#   4. Replace the vm-{VMID}-disk-0.qcow2 file with the one generated by packer in step 1 above. e.g.
#       `rm /yourdisk/sdb1/images/{VMID}/vm-{VMID}-disk-0.qcow2`
#       `cp output/archlinux-packer/packer-qemu /yourdisk/sdb1/images/804/vm-804-disk-0.qcow2`
#
# The Arch VM should now boot but be in a broken state. You will see disk UUID errors indicating you are in an emergency shell.
#
# To fix this, boot the arch installer .iso in your VM by:
#   1. Selecting your VM in the Proxmox UI and going to Hardware > CD/DVD Drive > Use CD/DVD disc image
#   2. Choosing the storage and iso image of the arch installer iso (physical location for this menu might be `/yourdisk/sdb1/template/iso/`)
#   3. Rebooting the VM and pressing Escape to bring up the boot device menu. Choose `DVD/CD`
#   4. Select option #1 - `Boot Arch Linux (x86_64)`
#
# Now we need to create a new initial ramdisk (initrd) and re-run grub config. After this the VM should boot normally
# Do the following:
#   1. `lsblk` to figure out your primary and boot partitions. These might be the same partition. For these docs assume they are both in `sda2`
#   2. `mount /dev/sda2 /mnt` to mount your partition
#   3. `arch-chroot /mnt` to chroot into your VM 
#   4. `pacman -Syu` to update packages
#   5. `mkinitcpio -p linux` to regenerate initramfs
#   6. `grub-mkconfig -o /mnt/boot/grub/grub.cfg` to rebuild grub
#   7. Exit chroot environment with `exit` and then `reboot`
#
#   Your VM should now boot normally. You probably want to take a snapshot or create a template in Proxmox.
#
#   If the boot is slow and it's stuck on something like `/dev/vda1`, it might be due to a swap space. You should be able to comment that out.
#   This template should switch to a swap file most likely, or perphaps `systemd-swap`


pacman -Syu --noconfirm
mkinitcpio -p linux
grub-mkconfig -o /boot/grub/grub.cfg

